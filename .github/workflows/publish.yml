name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.1.0, etc.
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
        echo "Build completed successfully"
        ls -la dist/
    
    - name: Verify package
      run: |
        twine check dist/*
        echo "Package verification completed"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Install package from wheel
      shell: bash
      run: |
        python -m pip install --upgrade pip
        
        # Find the wheel file
        WHEEL_FILE=$(find dist/ -name "*.whl" | head -1)
        echo "Installing wheel file: $WHEEL_FILE"
        
        if [ -z "$WHEEL_FILE" ]; then
          echo "No wheel file found!"
          exit 1
        fi
        
        # Install the wheel
        pip install "$WHEEL_FILE"
        echo "Package installed successfully"
    
    - name: Test basic functionality
      shell: bash
      run: |
        echo "Testing netdiag installation..."
        
        # Test 1: Basic import
        python -c "import netdiag; print('✅ Basic import successful')"
        
        # Test 2: Version check
        python -c "import netdiag; print(f'Version: {netdiag.__version__}')"
        
        # Test 3: Function imports
        python -c "from netdiag import ping; print('✅ ping import OK')"
        python -c "from netdiag import dns_lookup; print('✅ dns_lookup import OK')"
        python -c "from netdiag import get_public_ip; print('✅ get_public_ip import OK')"
        
        # Test 4: Quick functionality test (may fail in CI, that's OK)
        python -c "import netdiag; print('✅ All imports working')"
        
        echo "All tests completed successfully!"

  publish-testpypi:
    name: Publish to TestPyPI
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/netdiag
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/netdiag
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}